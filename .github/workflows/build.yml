name: Build
on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  build:
    name: Build
    runs-on: windows-latest
    steps:
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      # - name: Test Solution
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #   shell: powershell
      #   run: |
      #     dotnet test .\DemoPipeline\DemoPipeline.sln `
      #       /p:CollectCoverage=true /p:CoverletOutputFormat=opencover `
      #       /p:CoverletOutput=".\..\TestResults\coverage.opencover.xml";
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin `
            /k:"kirillkrylov_miami2023" `
            /o:"kirillkrylov" `
            /d:sonar.login="${{ secrets.SONAR_TOKEN }}" `
            /d:sonar.host.url="https://sonarcloud.io";
          Set-Location -Path .\tasks;
          .\build-framework.cmd;
          Set-Location -Path .\..;
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
  # deploy:
  #   name: Deploy
  #   needs: build
  #   runs-on: windows-latest
  #   steps:
  #     - name: Check out code
  #       uses: actions/checkout@v3
  #     - name: Build for deploy
  #       shell: powershell
  #       run: dotnet build .\DemoPipeline\DemoPipeline.sln;
  #     - name: Push to destination
  #       uses: ./.github/actions/clio-install
  #       with: 
  #         url: ${{ secrets.PROD_URL }}
  #         login: ${{ secrets.PROD_LOGIN }}
  #         password: ${{ secrets.PROD_PASSWORD }}